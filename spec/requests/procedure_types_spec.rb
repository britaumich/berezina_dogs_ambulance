require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/procedure_types", type: :request do

  before(:each) do
    admin_user = FactoryBot.create(:admin_user)
    user = FactoryBot.create(:user, email_address: admin_user.email)
    animal_type_dog = FactoryBot.create(:animal_type, name: 'собака', plural_name: 'собаки')
    sign_in(user)
  end
  
  # This should return the minimal set of attributes required to create a valid
  # ProcedureType. As you add validations to ProcedureType, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "вакцинация" }
  }

  let(:invalid_attributes) {
    { name: "" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      ProcedureType.create! valid_attributes
      get procedure_types_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_procedure_type_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      procedure_type = ProcedureType.create! valid_attributes
      get edit_procedure_type_url(procedure_type)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new ProcedureType" do
        expect {
          post procedure_types_url, params: { procedure_type: valid_attributes }
        }.to change(ProcedureType, :count).by(1)
      end

      it "redirects to the procedure_types index page" do
        post procedure_types_url, params: { procedure_type: valid_attributes }
        expect(response).to redirect_to(procedure_types_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new ProcedureType" do
        expect {
          post procedure_types_url, params: { procedure_type: invalid_attributes }
        }.to change(ProcedureType, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post procedure_types_url, params: { procedure_type: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "вакцинация" }
      }

      it "updates the requested procedure_type" do
        procedure_type = ProcedureType.create! valid_attributes
        patch procedure_type_url(procedure_type), params: { procedure_type: new_attributes }
        procedure_type.reload
        expect(procedure_type.name).to eq("вакцинация")
      end

      it "redirects to the procedure_types index page" do
        procedure_type = ProcedureType.create! valid_attributes
        patch procedure_type_url(procedure_type), params: { procedure_type: new_attributes }
        procedure_type.reload
        expect(response).to redirect_to(procedure_types_url)
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        procedure_type = ProcedureType.create! valid_attributes
        patch procedure_type_url(procedure_type), params: { procedure_type: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested procedure_type" do
      procedure_type = ProcedureType.create! valid_attributes
      expect {
        delete procedure_type_url(procedure_type)
      }.to change(ProcedureType, :count).by(-1)
    end

    it "doesn't have deleted record in the table" do
      procedure_type = ProcedureType.create! valid_attributes
      delete procedure_type_url(procedure_type)
      expect(ProcedureType).not_to exist(procedure_type.id)
    end
  end
end
